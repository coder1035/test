package com.ms.itlnc.automation.config;

import com.ibm.db2.jcc.DB2DataSource;
import lombok.Getter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Configuration
@Getter
public class DataSourceConfig {

    @Bean(name = "databaseProperties")
    @ConfigurationProperties(prefix = "automation.database")
    public Map<String, DatabaseProperties> databaseProperties() {
        return new HashMap<>();
    }

    @Bean(name = "dataSources")
    public Map<String, DataSource> dataSources() {
        Map<String, DataSource> dataSources = new HashMap<>();

        databaseProperties().forEach((key, properties) -> {
            DataSource dataSource;
            if ("db2".equalsIgnoreCase(properties.getType())) {
                DB2DataSource db2DataSource = new DB2DataSource();
                db2DataSource.setDatabaseServer(properties.getServer());
                db2DataSource.setSchema(properties.getSchema());
                db2DataSource.setKerberized(true);
                db2DataSource.setBackgroundCleanupPeriod(properties.getBackgroundCleanupPeriod());
                db2DataSource.setValidationTimeout(properties.getValidationTimeout());
                db2DataSource.setPerformValidation(true);
                db2DataSource.setExpirationTimeout(properties.getExpirationTimeout());
                db2DataSource.setMinIdle(properties.getMinIdle());
                db2DataSource.setMaxIdle(properties.getMaxIdle());
                db2DataSource.setDriverClass(DB2DataSource.DEFAULT_DRIVER);
                dataSource = db2DataSource;
            } else if ("mssql".equalsIgnoreCase(properties.getType())) {
                DriverManagerDataSource mssqlDataSource = new DriverManagerDataSource();
                mssqlDataSource.setDriverClassName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                mssqlDataSource.setUrl("jdbc:sqlserver://" + properties.getServer() + ";databaseName=" + properties.getSchema());
                mssqlDataSource.setUsername("your-username"); // Replace with actual username
                mssqlDataSource.setPassword("your-password"); // Replace with actual password
                dataSource = mssqlDataSource;
            } else {
                throw new IllegalArgumentException("Unsupported database type: " + properties.getType());
            }
            dataSources.put(key, dataSource);
        });

        return dataSources;
    }
 public static void main(String[] args) {
        try {
            File xmlFile = new File("path/to/your/report.xml");
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(xmlFile);

            document.getDocumentElement().normalize();

            // Example: Extracting stats
            String totalTests = document.getElementsByTagName("totalTests").item(0).getTextContent();
            String passedTests = document.getElementsByTagName("passedTests").item(0).getTextContent();
            String failedTests = document.getElementsByTagName("failedTests").item(0).getTextContent();

            System.out.println("Total Tests: " + totalTests);
            System.out.println("Passed Tests: " + passedTests);
            System.out.println("Failed Tests: " + failedTests);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
