@Bean(name = "dataSources")
public Map<String, DataSource> dataSources() {
    Map<String, DataSource> dataSources = new HashMap<>();
    databaseProperties().forEach((key, properties) -> {
        DataSource dataSource;

        if ("db2".equalsIgnoreCase(properties.getType())) {
            DB2DataSource db2DataSource = new DB2DataSource();
            db2DataSource.setDatabaseServer(properties.getServer());
            db2DataSource.setSchema(properties.getSchema());
            db2DataSource.setKerberized(true);
            db2DataSource.setBackgroundCleanupPeriod(properties.getBackgroundCleanupPeriod());
            db2DataSource.setValidationTimeout(properties.getValidationTimeout());
            db2DataSource.setPerformValidation(true);
            db2DataSource.setExpirationTimeout(properties.getExpirationTimeout());
            db2DataSource.setMinIdle(properties.getMinIdle());
            db2DataSource.setMaxIdle(properties.getMaxIdle());
            db2DataSource.setDriverClass(DB2DataSource.DEFAULT_DRIVER);
            dataSource = db2DataSource;
        } else if ("mssql".equalsIgnoreCase(properties.getType())) {
            org.apache.commons.dbcp2.BasicDataSource mssqlDataSource = new org.apache.commons.dbcp2.BasicDataSource();
            mssqlDataSource.setUrl(properties.getServer());
            mssqlDataSource.setDriverClassName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            mssqlDataSource.setInitialSize(properties.getMinIdle());
            mssqlDataSource.setMaxTotal(properties.getMaxIdle());
            mssqlDataSource.setValidationQuery("SELECT 1");
            mssqlDataSource.setMinEvictableIdleTimeMillis(properties.getExpirationTimeout());
            dataSource = mssqlDataSource;
        } else {
            throw new IllegalArgumentException("Unsupported database type: " + properties.getType());
        }
        dataSources.put(key, dataSource);
    });
    return dataSources;
}
